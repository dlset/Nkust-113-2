# 期末專題作業：簡易線上課程平台

## 專案描述
本專案旨在讓學生練習使用 ASP.NET Core MVC 建置後端 API，並搭配 Angular 開發前端應用程式，實作出一個簡易的線上課程平台。平台應包含使用者瀏覽課程、模擬註冊課程，以及管理員管理課程等功能。

## 核心功能需求

### 1. 使用者端 (Angular)
*   **瀏覽課程列表：** 首頁或課程頁面應展示所有可用的課程，包含課程名稱、簡介等基本資訊。
*   **查看課程詳情：** 使用者點擊任一課程後，應能看到該課程的詳細資訊，如課程完整描述、講師、價格、開課日期等。
*   **(模擬) 註冊課程：** 使用者可以對感興趣的課程進行註冊。此功能無需串接真實金流，僅需在資料庫中記錄使用者的註冊意願即可。
*   **(可選) 使用者註冊與登入：** 若時間充裕，可實作使用者帳號註冊及登入功能。若時間不足，此部分可簡化或省略，專注於課程的公開展示與模擬註冊。

### 2. 管理員端 (ASP.NET MVC Core - 可考慮使用 Razor Pages 或 MVC Views 快速搭建)
*   **管理員登入：** 系統應提供管理員登入介面，驗證通過後方可進入管理後台。
*   **課程管理 (CRUD)：**
    *   **新增 (Create)：** 管理員可以新增課程，輸入課程名稱、描述、講師、價格等資訊。
    *   **讀取 (Read)：** 管理員可以查看所有課程列表及個別課程的詳細資訊。
    *   **更新 (Update)：** 管理員可以修改現有課程的資訊。
    *   **刪除 (Delete)：** 管理員可以刪除不再需要的課程。
*   **(可選) 查看使用者註冊列表：** 若已實作使用者註冊功能，管理員應能查看哪些使用者註冊了哪些課程。

## 技術棧

*   **後端：**
    *   **ASP.NET Core MVC：** 用於開發 RESTful API，處理業務邏輯。
    *   **Entity Framework Core：** 用於資料庫存取 (ORM)。
    *   **資料庫：** SQL Server、SQLite 或其他學生熟悉的關聯式資料庫。
*   **前端：**
    *   **Angular：** 主流前端框架，用於建構單頁應用程式 (SPA)。
    *   **(建議) Angular Material 或其他 UI 元件庫：** 加速 UI 開發，提升介面美觀度。
*   **API 設計：**
    *   遵循 RESTful API 設計原則，確保前後端溝通的標準化與易用性。

## 資料庫設計 (建議)

以下為建議的資料庫表結構，學生可依實際需求調整：

*   **`Courses` (課程資料表)**
    *   `CourseId` (Primary Key, int, Auto-increment) - 課程編號
    *   `CourseName` (string, Not null) - 課程名稱
    *   `Description` (string) - 課程描述
    *   `Instructor` (string) - 講師名稱
    *   `Price` (decimal) - 課程價格
    *   `StartDate` (datetime, Optional) - 開課日期
    *   `ImageUrl` (string, Optional) - 課程封面圖片路徑

*   **`Users` (使用者資料表 - 若實作使用者功能)**
    *   `UserId` (Primary Key, int, Auto-increment) - 使用者編號
    *   `Username` (string, Unique, Not null) - 使用者名稱
    *   `PasswordHash` (string, Not null) - 密碼雜湊 (請勿明文儲存密碼)
    *   `Email` (string, Optional) - 電子郵件
    *   `Role` (string, Default "User") - 使用者角色 (例如："User", "Admin")

*   **`Enrollments` (課程註冊資料表 - 若實作使用者註冊功能)**
    *   `EnrollmentId` (Primary Key, int, Auto-increment) - 註冊編號
    *   `UserId` (Foreign Key, references `Users.UserId`) - 使用者編號
    *   `CourseId` (Foreign Key, references `Courses.CourseId`) - 課程編號
    *   `EnrollmentDate` (datetime, Default current timestamp) - 註冊日期

## 評分標準 (參考)

*   **基本功能完整性 (60%)：**
    *   後端 API 是否能正確執行課程的 CRUD 操作。
    *   前端應用程式是否能正確串接後端 API 並展示課程列表及詳情。
    *   (模擬) 課程註冊功能是否能正確記錄。
    *   管理員端的課程管理功能是否完整。
*   **前後端分離架構 (20%)：**
    *   是否確實將前端 UI/UX 邏輯與後端業務邏輯分離。
    *   API 設計是否清晰、合理，並遵循 RESTful 風格。
*   **程式碼品質與專案結構 (10%)：**
    *   程式碼是否易於閱讀、理解，是否有適當的註解。
    *   專案檔案結構是否清晰、有條理。
    *   變數、函式命名是否具有意義。
*   **UI/UX 設計 (10%)：**
    *   使用者介面是否直觀、易用。
    *   整體視覺風格是否一致、美觀。

## 額外加分項目 (鼓勵挑戰)

*   **完整的使用者認證與授權：** 包含安全的註冊、登入機制，以及基於角色的權限控制。
*   **前端表單驗證：** 在使用者輸入資料時進行即時驗證，提升使用者體驗。
*   **後端 API 輸入驗證：** 對 API 接收到的資料進行驗證，確保資料的正確性與安全性。
*   **課程搜尋/篩選功能：** 允許使用者依照關鍵字、講師、價格區間等條件搜尋或篩選課程。
*   **圖片上傳功能：** 允許管理員上傳課程封面圖片。
*   **使用 Git 進行版本控制：** 展現良好的開發習慣。
*   **專案部署：** 將專案成功部署到任一雲端平台 (如 Azure App Service, Heroku, AWS Elastic Beanstalk 等) 或本地 IIS。
*   **撰寫單元測試或整合測試。**

## 提交要求

1.  **完整的專案原始碼：** 包含所有前端 (Angular) 和後端 (ASP.NET Core MVC) 的程式碼。請確保專案可以在標準開發環境中被建置與執行。
2.  **資料庫結構描述檔案：**
    *   提供 SQL 指令碼 (.sql 檔案) 以便建立所需的資料庫及資料表。
    *   或提供資料庫的實體關係圖 (ERD)。
3.  **一份簡要的專案說明文件 (例如 `README.md` 或 Word/PDF 文件)，內容應包含：**
    *   專案的整體架構說明。
    *   詳細的執行步驟：如何設定開發環境、建置專案、建立資料庫、以及啟動應用程式。
    *   已完成的功能列表，並對照需求規格。
    *   (可選) 開發過程中遇到的主要困難以及解決方法。
    *   (可選) 未來可以擴充或改進的方向。
4.  **(可選) 操作展示影片：** 錄製一段簡短的影片，展示專案的主要功能操作流程。

---

祝您專案順利！